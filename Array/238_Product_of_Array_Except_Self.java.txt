// Brute force Approach


class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;

        int arr[] = new int[n];

        for(int i = 0; i < n; i++){
            int product = 1;
            
            for(int j = 0; j < n; j++){
                if(i != j){
                    product = product * nums[j];
                }
            }

            arr[i] = product;
        }

        return arr;
    }
}





// Using Division Operator


class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;

        int arr[] = new int[n];

        int product = 1;
        int zeroCount = 0;

        for(int i = 0; i < n; i++){
            if(nums[i] != 0){
                product = product * nums[i];

            } else {
                zeroCount++;
            }
        }

        for(int i = 0; i < n; i++){
            if(zeroCount > 1){
                arr[i] = 0;

            }else if(zeroCount == 1){
                if(nums[i] == 0){
                    arr[i] = product;

                }else {
                    arr[i] = 0;
                }

            }else {
                arr[i] = product / nums[i];
            }
        }

        return arr;
    }
}






//  3rd Approach



class Solution {
    public int[] productExceptSelf(int[] nums) {
        
        int n = nums.length;

        int left[] = new int[n];
        int right[] = new int[n];

        int result[] = new int[n];

        left[0] = 1;
        for(int i = 1; i < n; i++){
            left[i] = left[i-1] * nums[i-1];
        }

        right[n-1] = 1;
        for(int i = n-2; i >= 0; i--){
            right[i] = right[i+1] * nums[i + 1];
        }

        for(int i = 0; i < n; i++){
            result[i] = left[i] * right[i];
        }

        return result;
    }
}





// 4th Approach



class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;

        int result[] = new int[n];

        result[0] = 1;

        for(int i = 1; i < n; i++){
            result[i] = result[i-1] * nums[i-1];
        }

        int rightProduct = 1;
        
        for(int i = n-1; i >= 0; i--){
            result[i] = result[i] * rightProduct;
            rightProduct = rightProduct * nums[i];
        }

        return result;
    }
}