// Brute force Approach that gives you TLE


class Solution {
    public int maxSubArray(int[] nums) {
        int n = nums.length;

        int max = nums[0];

        for(int i = 0; i < n; i++){
            int sum = 0;

            for(int j = i; j < n; j++){
                sum = sum + nums[j];
                max = Math.max(max, sum);
            }

            
        }

        return max;
    }
}





//  Kadane's Algorithms

class Solution {
    public int maxSubArray(int[] nums) {
        int n = nums.length;

        int maxSum = Integer.MIN_VALUE;
        int currentSum = 0;


        for(int i = 0; i < n; i++){
            currentSum += nums[i];

            maxSum = Math.max(maxSum, currentSum);

            if(currentSum < 0){
                currentSum = 0;
            }
        }

        return maxSum;
    }
}